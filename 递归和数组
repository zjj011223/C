#define _CRT_SECURE_NO_WARNINGS
#include<stdio.h>
//二维数组的打印
int main()
{
	int arr[3][4]={0};
	int i = 0;
	for (i = 0; i < 3; i++)
	{
		int j = 0;
		for (j = 0; j < 4; j++)
		{
			printf("arr[%d][%d]=%p\n",i,j,arr[i][j]);
		}
		return 0;
	}
	
}
//将数组按照升序的方式排列
void bubble_sort(int arr[], int sz)
{
	//确定冒泡排序的趟数
	int i = 0;
	for (i = 0; i < sz - 1; i++)
	{
		int flag = 1;//假设这一趟要排序的数据已经有序
		//每一趟冒泡排序
		int j = 0;
		for (j = 0; j < sz - 1 - i; j++)
		{
			if (arr[j] > arr[j + 1])
			{
				int tmp = arr[j];
				arr[j] = arr[j + 1];
				arr[j + 1] = tmp;
				flag = 0;//本趟排序的数据其实不完全有序
			}
		}
		if (flag == 1)
		{
			break;
		}
	}
}
int main()
{
	int arr[] = { 9,8,7,6,5,4,3,2,1,0 };
	int i = 0;
	int sz = sizeof(arr) / sizeof(arr[0]);
	//对arr进行排序，拍成升序
	//arr是数组，我们对数组arr进行传参，实际上传递过去的是数组的arr首元素的地址&arr[0]
	bubble_sort(arr, sz);//冒泡排序函数
	for (i = 0; i < sz; i++)
	{
		printf("%d ", arr[i]);
	}
	return 0;
}
//用递归的方式求出n的k次方
double Pow(int n, int k)
{
	//n^k=n* n^(k-1)
	if (k < 0)
		return (1.0 / (Pow(n, -k)));
	else if (k == 0)
		return 1;
	else
		return n * Pow(n, k - 1);
}
int main()
{
	int n=0;
	int k=0;
	scanf("%d%d", &n, &k);
	double ret = Pow(n, k);
	printf("ret=%lf\n", ret);

	return 0;
}
// 
//1.实现函数int初始化数组为全0；
//2.实现print()打印数组的每个元素
//3.实现reverse()函数完成数组元素的逆置
void Init(int arr[], int sz)
{
	int i = 0;
	for (i = 0; i < sz; i++)
	{
		arr[i] = 0;
	}
}
void Print(int arr[], int sz)
{
	int i = 0;
	for (i = 0; i < sz; i++)
	{
		printf("%d ", arr[i]);
	}
	printf("\n");
}
void Reverse(int arr[], int sz)
{
	int left = 0;
	int right = sz - 1;
	while (left<right)
	{
		int tmp = arr[left];
		arr[left] = arr[right];
		arr[right] = tmp;
		left++;
		right--;
	}
}
int main()
{
	int arr[10] = {1,2,3,4,5,6,7,8,9,10};
	int sz = sizeof(arr) / sizeof(arr[0]);
	//Init(arr, sz);//把数组初始化为0
	Print(arr, sz);
	Reverse(arr, sz);
	Print(arr, sz);
	return 0;
}
//交换两数组元素的值
int main()
{
	int arr1[] = { 1,3,5,7,9 };
	int arr2[] = { 2,4,6,8,0 };
	int tmp = 0;
	int i = 0;
	int sz = sizeof(arr1) / sizeof(arr1[0]);
	for (i = 0; i < sz; i++)
	{
		tmp = arr1[i];
		arr1[i] = arr2[i];
		arr2[i] = tmp;
		printf("%d ", arr1[i]);
		/*printf("%d ", arr2[i]);*/
	}
	return 0;
}
//统计下面二进制中1的个数
int count_bit_one(unsigned int n)
{
	int count = 0;
	while (n)
	{
		if (n % 2 == 1)
		{
			count++;
		}
		n = n / 2;
	}
	return count;
}

int count_bit_one(int n)
{
	int count = 0;
	int i = 0;
	for (i = 0; i < 32; i++)
	{
		if (((n >> i) & 1) == 1)
		{
			count++;
		}
	}
	return count;
}

int count_bit_one(int n)
{
	int count = 0;
	while (n)
	{
		n = n & (n - 1);
		count++;
	}
	return count;
}
//n=n&n(n-1)
//13
//1101 n
//1100 n-1
//1100 n
//1011 n-1
//1000 n
//0111 n-1
//0000 n

int main()
{
	int a = 0;
	scanf("%d", &a);
	//写一个函数求a的二进制(补码)表示中有几个1
	//13
	//00000000000000000000000000001101
	int count = count_bit_one(a);
	printf("count=%d\n", count);
	return 0;
}

//求二进制中不同位的个数
//两个int（32位）整数m和n的二进制表达中，有多少个位(bit)不同
int get_diff_bit(int m, int n)
{
	int tmp = m ^ n;//符号异或(^):相同数为0，不相同为1
	//return count_bit_one(tmp);
	int count=0;
	while (tmp)
	{
		tmp = tmp & (tmp - 1);
			count++;
	}
	return count;
	
}
int main()
{
	int m = 0;
	int n = 0;
	scanf("%d%d", &m, &n);
	int count = get_diff_bit(m, n);
	printf("count=%d\n", count);
	return 0;
}

//获取一个整数二进制序列中所有的偶数位和奇数位，分别打印出二进制序列
//

//交换两个int变量的值(不创建临时变量)
int main()
{
	int a = 3;
	int b = 5;
	printf("before:a=%d b=%d", a, b);
	int tmp = 0;//临时变量
	tmp = a;
	a = b;
	b = tmp;
	printf("after:a=%d b=%d", a, b);
	//加减法-可能会溢出
	/*a = a + b;
	b = a - b;
	a = a - b;
	printf("after:a=%d b=%d", a, b);*/

	//异或的方法
	/*a = a ^ b;
	b = a ^ b;
	a = a ^ b;
	printf("after:a=%d b=%d", a, b)*/;

	return 0;
}

使用指针打印数组的内容
写一个函数打印arr数组的内容，不适用数组下标，使用指针，arr是一个整形一维数组
void print(int *p , int sz)
{
	int i = 0;
	for (i = 0; i < sz; i++)
	{
		printf("%d ", *(p + i));
	}
}
int main()
{
	int arr[] = {1,2,3,4,5,6,7,8,9};
	int sz = sizeof(arr) / sizeof(arr[0]);
	print(arr, sz);
	return 0;
}

乘法口诀表
void print_table(int m)
{
	int i = 0;
	for (i = 0; i <=m; i++)
	{
		int j = 0;
		for (j = 0; j <=i; j++)
		{
			printf("%d*%d=%-3d ", i, j, i * j);
		}
		printf("\n");
	}
}
int main()
{
	int m = 0;
	scanf("%d", &m);
	print_table(m);
	return 0;
}

字符串逆序
编写一个函数reverse_string(char * string)（递归实现）
实现：将参数字符串中的字符反向排列
 要求：不能使用c函数库中的字符串操作函数

#include <string.h>

int my_strlen(char* str)
{
	int count = 0;
	while (* str != '\0')
	{
		count++;
		str++;
	}
	return count;

}
循环方式
void reverse_string(char arr[])
{
	int left = 0;
	int right = my_strlen(arr)-1;

	while (left < right)
	{
		int tmp = arr[left];
		arr[left] = arr[right];
		arr[right] = tmp;
		left++;
		right--;
	}
}
void reverse_string(char* arr)
{
	//1.
	char tmp = arr[0];
	int len = my_strlen(arr);
 //2.
	arr[0] = arr[len - 1];
 //3.
	arr[len - 1] = '\0';
	if(my_strlen(arr+1) >=2)
		reverse_string(arr+1);
 //4.
	arr[len - 1] = tmp;
}
int main()
{
	char arr[] = "abcdefg";//fedcba
	reverse_string(arr);
	printf("%s\n", arr);

	return 0;
}

写一个递归函数DigitSum(n),输入一个非零整数，返回组成它的数字之和
例：1729，输出：1+7+2+9=19
DigitSum(1729)
DigitSum(172)+1729%10
DigitSum(17)+172%10+1729%10
DigitSum(1)+17%10+.....

int DigitSum(unsigned int num)
{
	if (num > 9)
	{
		return DigitSum(num / 10) + num % 10;
	}
	else
	{
		return num;
	}
}
int main()
{
	unsigned int num = 0;
	scanf("%d",&num);
	int ret = DigitSum(num);
	printf("ret=%d\n", ret);
	return 0;
}
